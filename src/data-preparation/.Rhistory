})
# bind everything together in one table
df <- do.call('rbind', content)
# view the data in the console
head(df)
# view the data in a new tab in RStudio
View(df)
tmp <- read.table(urls[1], sep = ',', skip = 1, header = TRUE)
lapply(1:10, function(i)i)
lapply(urls, function(i)i)
all_data = lapply(urls, function(url) {
print(url)
tmp <- read.table(urls, sep = ',', skip = 1, header = TRUE)
retur(tmp)})
all_data = lapply(urls, function(url) {
print(url)
tmp <- read.table(url, sep = ',', skip = 1, header = TRUE)
return(tmp)
})
# str(all_data)
df = do.call('rbind', all_data)
write.table(df, 'spotify_output.csv')
# view the data in the console
head(df)
# transformation
library(dplyr)
summaris(df, av = mean(df))
summaries(df, t0tal_streams = sum(streams))
summarise(df, t0tal_streams = sum(streams))
summarise(df, total_streams = sum(Streams))
View(df)
all_data = lapply(urls, function(url) {
print(url)
tmp <- read.table(url, sep = ',', skip = 1, quote = '"', header = TRUE)
tmp$url <- url
return(tmp)
})
# str(all_data)
df = do.call('rbind', all_data)
summarise(df, total_streams = sum(Streams))
View(df)
all_data = lapply(urls, function(url) {
print(url)
tmp <- read.table(url, sep = ',', skip = 1, quote = '"', header = TRUE)
tmp$fileurl <- url
return(tmp)
})
# str(all_data)
df = do.call('rbind', all_data)
summarise(df, total_streams = sum(Streams))
summarise(df, total_streams = sum(Streams, na.rm = TRUE))
df %>%  group_by(artist) %>%
df %>%  group_by(artist) %>% summarise(total_streams = sum(Streams))
df %>% group_by(artist) %>% summarise(total_streams = sum(Streams))
all_data = lapply(urls, function(url) {
print(url)
tmp <- read.table(url, sep = ',', skip = 1, quote = '"', header = TRUE)
tmp$fileurl <- url
return(tmp)
})
# str(all_data)
df = do.call('rbind', all_data)
df %>% group_by(artist) %>% summarise(total_streams = sum(Streams))
View(df)
df %>% group_by(Artist) %>% summarise(total_streams = sum(Streams))
library('dplyr')
streams <- read.csv("streams.csv", sep = ",")
songs <- read.csv("songs.csv", sep = ",")
country_codes <- read.csv("country_codes.csv", sep = ";")
str(streams)
str(songs)
str(country_codes)
summary(streams)
summary(songs)
# my answer
merge(songs, streams,by = "song_id")
# my answer
merged_spotify <- merge(songs, streams,by = "song_id")
View(country_codes)
merged_spotify %>%
rename(country = countr_code_2_letter)
merged_spotify %>%
rename(country_code_2_letter = country)
merged_spotify <- merge(merged_spotify, country, by = "country_code_2_letter")
merged_spotify <- merge(merged_spotify, country_codes, by = "country_code_2_letter")
View(merged_spotify)
merged_spotify %>%
rename(country_code_2_letter = country)
merged_spotify <- merge(merged_spotify, country_codes, by = "country_code_2_letter")
names(merged_spotify)
merged_spotify <- merged_spotify %>%
rename(country_code_2_letter = country)
names(merged_spotify)
merged_spotify <- merge(merged_spotify, country_codes, by = "country_code_2_letter")
merged_spotify_hannes <- streams %>%
inner_join(songs, by = "song_id") %>%
left_join(country_codes, by = c("country" = "country_code_2_letter"), suffix = c("_streams", "_cc"))
View(merged_spotify_hannes)
merged_spotify <- merge(streams, songs,by = "song_id")
merged_spotify <- merged_spotify %>%
rename(country_code_2_letter = country)
merged_spotify <- merge(merged_spotify, country_codes, by = "country_code_2_letter")
# i did not do this but I saw we need to save it as a .csv?
write.csv(merged_spotify_hannes, "merged_df.csv")
# duplicates
duplicated(merged_spotify_hannes)
# duplicates
# check duplicates
duplicated(merged_spotify_hannes$song_id)
duplicated(merged_spotify_hannes$rank)
#remove duplicates
merged_spotify_no_duplicated <- merged_spotify %>% filter(!duplicated(df))
#remove duplicates
merged_spotify_no_duplicated <- merged_spotify_hannes %>% filter(!duplicated(merged_spotify_hannes))
# put in csv
write.csv(merged_spotify_no_duplicated, "df_no_duplicates.csv")
mputation_values <- df %>% filter(!is.na(popularity))%>%
group_by(country, date) %>%
summarise(popularity_filled = median(popularity))
imputation_values <- merged_spotify_no_duplicated %>% filter(!is.na(popularity))%>%
group_by(country, date) %>%
summarise(popularity_filled = median(popularity))
imputation_values
# merge
df_joined <- merged_spotify_no_duplicated %>% left_join(imputation_values, by = c("country" = "country", "date" = "date"))
df_Joined
df_joined
# when popularity is missing, put popularity_filled in, otherwise just popularity
df <- df_joined %>% mutate(popularity_filled = ifelse(is.na(popularity), popularity_filled, popularity))
write.csv(df, "df_imputed.csv")
?seq
View(df)
counter <- 1:length(date)
dates <- as.data.frame(cbind(counter=counter, date=as.character(date)))
counter <- 1:length(date)
dates <- data.frame(cbind(counter=counter, date=as.character(date)))
dates
date <- seq(min(as.Date(df$date)), max(as.Date(df$date)), by = "day")
counter <- 1:length(date)
dates <- data.frame(cbind(counter=counter, date=as.character(date)))
df_with_dates <- df %>% inner_join(dates, by = "date")
View(imputation_values)
df <- df_with_dates[!is.na(df_with_dates$song_id),]
df <- df %>%  group_by (country, date) %>%
mutate(ranking = rank(-streams, ties.method = "random"))
df_6 <- df_with_dates[!is.na(df_with_dates$song_id),]
df_6 <- df_6 %>%  group_by (country, date) %>%
mutate(ranking = rank(-streams, ties.method = "random"))
max(df_6$ranking)
df[df$ranking >= 200,]
df_6[df_6$ranking >= 200,]
df_6 <- df_6[!is.na(df_6$song_id),]
# your answer
# create function that takes 1) a dataframe and 2) a country as input and 3) lists the genres for all song id's in the respective country according to the specified format above.
# this question is really hard and I needed to see the answers first (i think making functions and loops are quite difficult)
install.packages("reshape2")
library(reshape2)
reshape_songs <- function(df_6, country){
song_ids = c()
song_genres = c()
df_7 <- df_6[df$country_cc == country, ]
genres <- strsplit(df$genres, split=",")
for(counter in 1:nrow(df_7)){
for(genre in unique(genres[[counter]])){
song_ids = c(song_ids, df[counter,]$song_id)
song_genres = c(song_genres, genre)
}
}
song_ids_genres <- data.frame(song_ids, song_genres)
song_ids_genres <- song_ids_genres %>% filter(!duplicated(song_ids_genres))
songs_reshaped <- song_ids_genres %>% dcast(formula=song_ids~song_genres, fun.aggregate = length, value.var = "song_genres")
return(songs_reshaped)
}
# input
df_8 <- read.csv("df_ranking.csv", sep=",")
# transformation
songs_genres <- reshape_songs(df_8, "Netherlands")
# output
write.csv(df, "df_reshaped.csv")
install.packages(c("data.table", "knitr", "Rcpp", "ggplot2", "rmarkdown"))
install.packages(c("data.table", "knitr", "Rcpp", "ggplot2", "rmarkdown"))
install.packages(c("data.table", "knitr", "Rcpp", "ggplot2", "rmarkdown"))
install.packages(c("data.table", "knitr", "Rcpp", "ggplot2", "rmarkdown"))
install.packages(c("rlang", "pillar"))
install.packages(c("rlang", "pillar"))
View(total)
BLM2020_Dutch_elections15 <- read.csv("~/Tilburg universiteit/ODCM/BLM2020_Dutch_elections15.csv", comment.char="#")
View(BLM2020_Dutch_elections15)
lenghts(BLM2020_Dutch_elections15$Tweet.Id)
max(BLM2020_Dutch_elections15$Tweet.Id)
View(BLM2020_Dutch_elections15)
BLM2021_Dutch_elections15 <- read.csv("~/Tilburg universiteit/ODCM/BLM2021_Dutch_elections15.csv")
View(BLM2021_Dutch_elections15)
inner_join(BLM2020_Dutch_elections15, BLM2021_Dutch_elections15, by = "Datetime")
# join_type(firstTable, secondTable, by=columnTojoinOn)
library(dplyr)
inner_join(BLM2020_Dutch_elections15, BLM2021_Dutch_elections15, by = "Datetime")
blm2022 < - inner_join(BLM2020_Dutch_elections15, BLM2021_Dutch_elections15, by = "Datetime")
blm2022DF < - inner_join(BLM2020_Dutch_elections15, BLM2021_Dutch_elections15, by = "Datetime")
View(BLM2020_Dutch_elections15)
View(BLM2021_Dutch_elections15)
View(BLM2020_Dutch_elections15)
BLM2021_Dutch_elections16 <- read.csv("~/Tilburg universiteit/ODCM/BLM2021_Dutch_elections16.csv", comment.char="#")
View(BLM2021_Dutch_elections16)
blm2022DF < - inner_join(BLM2020_Dutch_elections15, BLM2021_Dutch_elections16, by = "Datetime")
blm2022DF < - rbin(BLM2020_Dutch_elections15, BLM2021_Dutch_elections16, by = "Datetime")
blm2022DF <- rbind(BLM2020_Dutch_elections15, BLM2021_Dutch_elections16, by = "Datetime")
blm2022DF <- rbind(BLM2020_Dutch_elections15, BLM2021_Dutch_elections15, by = "Datetime")
View(blm2022DF)
blm2022DF <- rbind(BLM2020_Dutch_elections15, BLM2021_Dutch_elections15)
View(BLM2021_Dutch_elections15)
cols_to_drop = c('Like', 'Username', 'Tweet.Id')
mobility = mobility[, which(!colnames(BLM2021_Dutch_elections16)%in%cols_to_drop)]
View(total)
BLM2021 = BLM2021_Dutch_elections16[, which(!colnames(BLM2021_Dutch_elections16)%in%cols_to_drop)]
View(BLM2021)
# datetime
BLM2021$Datetime =as.Date(mobility$date)
# datetime
BLM2021$Datetime =as.Date(BLM2021$date)
# datetime
BLM2021$Datetime =as.Date(BLM2021$date, format = "%m/%d/%Y %I:%M:%S %p)
# datetime
BLM2021$Datetime =as.Date(BLM2021$date, format = "%m/%d/%Y %I:%M:%S %p")
summary(BLM2021$Datetime)
# datetime
library(lubridate)
BLM2021$Datetime =as.Date(BLM2021$date, format = "%m/%d/%Y %I:%M:%S %p")
BLM2021$Datetime =as.Date(BLM2021$date, format = %Y-%m-%dT%H:%M:%S")
BLM2021$Datetime =as.Date(BLM2021$date, format = "%Y-%m-%dT%H:%M:%S")
BLM2021$Datetime =as.Date(BLM2021$date, format = "y-m-d'T'H:m:sZ'Z'")
summary(BLM2021$Datetime)
BLM2021$Datetime =as.Date(BLM2021$date, format = "%y-%m-%d'T'%H:%m:%sZ'Z'")
BLM2021$Datetime =as.Date(BLM2021$DateTime, format = "%y-%m-%d'T'%H:%m:%sZ'Z'")
BLM2021$Datetime =as.Date(BLM2021$Datetime, format = "%y-%m-%d'T'%H:%m:%sZ'Z'")
summary(BLM2021$Datetime)
BLM2021$Datetime =as.Date(BLM2021$Datetime, format = "%y-%m-%d'T'%H:%m")
BLM2021$Datetime =as.Date(BLM2021_Dutch_elections16$Datetime, format = "%y-%m-%d'T'%H:%m")
BLM2021$Datetime =as.Date(BLM2021_Dutch_elections16$Datetime, format = "y-m-d'T'H:m:s")
BLM2021$Datetime <- gsub(x=BLM2021$Datetime,pattern=" +00:00",replacement="",fixed=T)
BLM2021$Datetime <- gsub(x=BLM2020_Dutch_elections15$Datetime,pattern=" +00:00",replacement="",fixed=T)
View(BLM2021)
BLM2021$Datetime <- gsub(x=BLM2020_Dutch_elections15$Datetime,pattern="+00:00",replacement="",fixed=T)
BLM2021$Datetime =as.Date(BLM2021_Dutch_elections16$Datetime, format = "y-m-d'T'H:m:s")
BLM2021$Datetime <- gsub(x=BLM2020_Dutch_elections15$Datetime,pattern="+00:00",replacement="",fixed=T)
BLM2021$Datetime =as.Date(BLM2021$Datetime, format = "y-m-d'T'H:m:s")
BLM2021$Datetime <- gsub(x=BLM2020_Dutch_elections15$Datetime,pattern="+00:00",replacement="",fixed=T)
BLM2021$Datetime =as.Date(BLM2021$Datetime, format = "%Y-%m-%dT%H:%M:%S")
BLM2021 = BLM2021_Dutch_elections16[, which(!colnames(BLM2021_Dutch_elections16)%in%cols_to_drop)]
BLM2021$Datetime <- gsub(x=BLM2021$Datetime,pattern="+00:00",replacement="",fixed=T)
BLM2021$Datetime =as.Date(BLM2021$Datetime, format = "%Y-%m-%dT%H:%M:%S")
BLM2021 = BLM2021_Dutch_elections16[, which(!colnames(BLM2021_Dutch_elections16)%in%cols_to_drop)]
BLM2021$Datetime <- gsub(x=BLM2021$Datetime,pattern="+00:00",replacement="",fixed=T)
BLM2021$Datetime <- gsub(x=BLM2021$Datetime)
BLM2021$Datetime <- as.Date(BLM2021$Datetime)
library(shiny)
ui <- fluidPage()
server <- function(input, output){}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
h2("COVID-19 Mobility Data"),
selectInput(inputId = "dv", label = "Category",
choices = c("Retail_Recreation", "Grocery_Pharmarcy", "Parks", "Transit_Stations", "Workplaces", "Residential"),
selected = "Grocery_Pharmarcy"),
selectInput(inputId = "provinces", "Province(s)",
choices = levels(mobility$Province),
multiple = TRUE,
selected = c("Utrecht", "Friesland", "Zeeland")),
dateRangeInput(inputId = "date", label = "Date range",
start = min(mobility$Date),
end   = max(mobility$Date)),
downloadButton(outputId = "download_data", label = "Download"),
),
mainPanel(
plotlyOutput(outputId = "plot"),
em("Postive and negative percentages indicate an increase and decrease from the baseline period (median value between January 3 and February 6, 2020) respectively."),
DT::dataTableOutput(outputId = "table")
)
)
)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(tidyverse)
mobility <- read.csv("2020_NL_Region_Mobility_Report.csv", sep=",")
mobility <- read.csv("2020_NL_Region_Mobility_Report.csv", sep=",")
mobility <- read.csv('https://media.githubusercontent.com/media/hannesdatta/course-dprep/master/content/docs/tutorials/data-exploration-in-r/2020_NL_Region_Mobility_Report.csv', sep = ',')
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
h2("COVID-19 Mobility Data"),
selectInput(inputId = "dv", label = "Category",
choices = c("Retail_Recreation", "Grocery_Pharmarcy", "Parks", "Transit_Stations", "Workplaces", "Residential"),
selected = "Grocery_Pharmarcy"),
selectInput(inputId = "provinces", "Province(s)",
choices = levels(mobility$Province),
multiple = TRUE,
selected = c("Utrecht", "Friesland", "Zeeland")),
dateRangeInput(inputId = "date", label = "Date range",
start = min(mobility$Date),
end   = max(mobility$Date)),
downloadButton(outputId = "download_data", label = "Download"),
),
mainPanel(
plotlyOutput(outputId = "plot"),
em("Postive and negative percentages indicate an increase and decrease from the baseline period (median value between January 3 and February 6, 2020) respectively."),
DT::dataTableOutput(outputId = "table")
)
)
)
library(shiny)
library(plotly)
install.packages(plotly)
library(plotly)
library(shiny)
install.packages(plotly)
library(plotly)
library(shiny)
library(DT)
# mobility <- read.csv("mobility_data.csv", sep = ';')
mobility$Date <- as.Date(mobility$Date)
library(shiny)
library(DT)
# mobility <- read.csv("mobility_data.csv", sep = ';')
mobility$Date <- as.Date(mobility$date)
mobility$Province <- as.factor(mobility$Province)
View(mobility)
mobility$Province <- as.factor(mobility$sub_region_1)
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
h2("COVID-19 Mobility Data"),
selectInput(inputId = "dv", label = "Category",
choices = c("Retail_Recreation", "Grocery_Pharmarcy", "Parks", "Transit_Stations", "Workplaces", "Residential"),
selected = "Grocery_Pharmarcy"),
selectInput(inputId = "provinces", "Province(s)",
choices = levels(mobility$Province),
multiple = TRUE,
selected = c("Utrecht", "Friesland", "Zeeland")),
dateRangeInput(inputId = "date", "Date range",
start = min(mobility$Date),
end   = max(mobility$Date)),
downloadButton(outputId = "download_data", label = "Download"),
),
mainPanel(
plotlyOutput(outputId = "plot"), br(),
em("Postive and negative percentages indicate an increase and decrease from the baseline period (median value between January 3 and February 6, 2020) respectively."),
br(), br(), br(),
DT::dataTableOutput(outputId = "table")
)
)
)
install.packages("plotly")
install.packages("plotly")
install.packages("plotly")
library(shiny)
ui <- fluidPage()
server <- function(input, output){}
shinyApp(ui = ui, server = server)
library(shiny)
# install.packages("plotly")
library(plotly)
library(shiny)
# install.packages("plotly")
# library(plotly)
library(DT)
# mobility <- read.csv("mobility_data.csv", sep = ';')
mobility$Date <- as.Date(mobility$date)
mobility$Province <- as.factor(mobility$sub_region_1)
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
h2("COVID-19 Mobility Data"),
selectInput(inputId = "dv", label = "Category",
choices = c("Retail_Recreation", "Grocery_Pharmarcy", "Parks", "Transit_Stations", "Workplaces", "Residential"),
selected = "Grocery_Pharmarcy"),
selectInput(inputId = "provinces", "Province(s)",
choices = levels(mobility$Province),
multiple = TRUE,
selected = c("Utrecht", "Friesland", "Zeeland")),
dateRangeInput(inputId = "date", "Date range",
start = min(mobility$Date),
end   = max(mobility$Date)),
downloadButton(outputId = "download_data", label = "Download"),
),
mainPanel(
plotlyOutput(outputId = "plot"), br(),
em("Postive and negative percentages indicate an increase and decrease from the baseline period (median value between January 3 and February 6, 2020) respectively."),
br(), br(), br(),
DT::dataTableOutput(outputId = "table")
)
)
)
library(shiny)
install.packages("plotly")
library(plotly)
library(shiny)
install.packages("plotly")
library(plotly)
?rbind
BLM2020_filterd <- read.csv('../../gen/data-preparation/temp/tempfile1.csv', sep = '\t', na.strings=c("", "NA"))
setwd("~/Tilburg universiteit/dprep-project/src/data-preparation")
dir.create('../../datasets', recursive= TRUE)
files = list(
c(url = 'https://www.dropbox.com/s/7ywlwmynitdb2rr/BLM2020_Dataset.csv?dl=1', target =
'BLM2020_dataset.csv'),
c(url = 'https://www.dropbox.com/s/glpv88v6hb0u4j1/BLM2021_Dataset.csv?dl=1', target =
'BLM2021_dataset.csv'))
library(data.table)
for (i in files) {
print(i)
#i['url']
#i['target']
my_data <- fread(i['url'])
write.table(my_data, paste0('../../datasets/', i['target']))
}
filenames = c('../../datasets/BLM2020_dataset.csv',
'../../datasets/BLM2021_dataset.csv')
my_data = lapply(filenames,
function(fn) {
read.csv(
fn,
stringsAsFactors = FALSE,
sep = '\t',
na.strings = c("", "NA")
)
})
# Loop through all of the data
dir.create('../../gen/data-preparation/temp', recursive= TRUE)
prepared_data <- list()
for (i in seq(along=my_data)) {
print(i)
blmdata = my_data[[i]]
fn = filenames[i]
extracted_filename = rev(strsplit(fn, '/')[[1]])[1]
# Get a first look of the data
blmdata$retweeted_tweet[is.na(blmdata$retweeted_tweet)] <- 0
blmdata$quoted_tweet[is.na(blmdata$quoted_tweet)] <- "No"
# Remove duplicates with the distinct function
sum(duplicated(blmdata))
blmdata %>% distinct(blmdata$tweet_id)
# See the type of data of the variables
glimpse(blmdata)
# Separate the date and the time into 2 variables
blmdata$date <- sapply(strsplit(as.character(blmdata$datetime), " "), "[", 1)
blmdata$time <- sapply(strsplit(as.character(blmdata$datetime), " "), "[", 2)
#see the class of the date
class(blmdata$date)
# The data is a character and needs to be converted into a date variable
blmdata$date <- as.Date(blmdata$date, format = c("%Y-%m-%d"))
# Make the Time variable readable
blmdata$time <- gsub(x=blmdata$time, pattern="+00:00",replacement="",fixed=T)
# Remove the Datetime variable and create a new dataframe
blmdata = subset(blmdata, select = -c(datetime))
# In order you want to remove attributes you don't need, use the following function with X and Y being attributes
# blm2020 = subset(blm2020, select = -c(X, Y))
# Filter on the location
# location <- c("NL", "nl", "Netherlands", "netherlands", "The Netherlands", "the netherlands", "Nederland", "nederland", "Holland", "holland", "Amsterdam", "010", "020", "Rotterdam", "Het mooie Brabant")
# blm2020_filtered <- blm2020 %>% filter(Location %in% location)
#If we need to filter on date
# bike_share_rides_past <- bike_share_rides %>%
#   filter(date <= today())
#Language detection, doesn't work for me
#install.packages("cld2")
#library("cld2")
#install.packages("cld3")
#detect_language(blm2020$Text)
prepared_data[[i]] <- blmdata
write.table(blmdata, paste0('../../gen/data-preparation/temp/', extracted_filename))
}
prepared_data <- list()
for (i in seq(along=my_data)) {
print(i)
blmdata = my_data[[i]]
fn = filenames[i]
extracted_filename = rev(strsplit(fn, '/')[[1]])[1]
# Get a first look of the data
blmdata$retweeted_tweet[is.na(blmdata$retweeted_tweet)] <- "No"
blmdata$quoted_tweet[is.na(blmdata$quoted_tweet)] <- "No"
# Remove duplicates with the distinct function
sum(duplicated(blmdata))
blmdata %>% distinct(blmdata$tweet_id)
# See the type of data of the variables
glimpse(blmdata)
# Separate the date and the time into 2 variables
blmdata$date <- sapply(strsplit(as.character(blmdata$datetime), " "), "[", 1)
blmdata$time <- sapply(strsplit(as.character(blmdata$datetime), " "), "[", 2)
#see the class of the date
class(blmdata$date)
# The data is a character and needs to be converted into a date variable
blmdata$date <- as.Date(blmdata$date, format = c("%Y-%m-%d"))
# Make the Time variable readable
blmdata$time <- gsub(x=blmdata$time, pattern="+00:00",replacement="",fixed=T)
# Remove the Datetime variable and create a new dataframe
blmdata = subset(blmdata, select = -c(datetime))
# In order you want to remove attributes you don't need, use the following function with X and Y being attributes
# blm2020 = subset(blm2020, select = -c(X, Y))
# Filter on the location
# location <- c("NL", "nl", "Netherlands", "netherlands", "The Netherlands", "the netherlands", "Nederland", "nederland", "Holland", "holland", "Amsterdam", "010", "020", "Rotterdam", "Het mooie Brabant")
# blm2020_filtered <- blm2020 %>% filter(Location %in% location)
#If we need to filter on date
# bike_share_rides_past <- bike_share_rides %>%
#   filter(date <= today())
#Language detection, doesn't work for me
#install.packages("cld2")
#library("cld2")
#install.packages("cld3")
#detect_language(blm2020$Text)
prepared_data[[i]] <- blmdata
write.table(blmdata, paste0('../../gen/data-preparation/temp/', extracted_filename))
}
