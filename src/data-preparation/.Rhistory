blmdata$rendered_content <- gsub(blmdata$rendered_content, pattern = "", replacement = "", fixed = T)
blmdata$rendered_content <- gsub(blmdata$rendered_content, pattern = "«", replacement = "", fixed = T)
blmdata$rendered_content <- gsub(blmdata$rendered_content, pattern = "¨", replacement = "", fixed = T)
blmdata$rendered_content <- gsub(blmdata$rendered_content, pattern = "&amp;", replacement = "&", fixed = T)
blmdata$rendered_content <- gsub(blmdata$rendered_content, pattern = "¢", replacement = "", fixed = T)
blmdata$rendered_content <- gsub(blmdata$rendered_content, pattern = "'ª", replacement = "", fixed = T)
blmdata$rendered_content <- gsub(blmdata$rendered_content, pattern = "o", replacement = "", fixed = T)
blmdata$rendered_content <- gsub(blmdata$rendered_content, pattern = "®", replacement = "", fixed = T)
blmdata$rendered_content <- gsub(blmdata$rendered_content, pattern = "â", replacement = "", fixed = T)
blmdata$rendered_content <- gsub(blmdata$rendered_content, pattern = "Y", replacement = "&", fixed = T)
blmdata$rendered_content <- gsub(blmdata$rendered_content, pattern = "~", replacement = "", fixed = T)
blmdata$rendered_content <- gsub(blmdata$rendered_content, pattern = "o", replacement = "", fixed = T)
blmdata$rendered_content <- gsub(blmdata$rendered_content, pattern = "½", replacement = "", fixed = T)
blmdata$rendered_content <- gsub(blmdata$rendered_content, pattern = "T", replacement = "", fixed = T)
blmdata$rendered_content <- gsub(blmdata$rendered_content, pattern = "^", replacement = "", fixed = T)
blmdata$user_description <- gsub(blmdata$user_description, pattern = "\r\n", replacement = "", fixed = T)
blmdata$user_description <- gsub(blmdata$user_description, pattern = "©", replacement= "", fixed = T)
blmdata$user_description <- gsub(blmdata$user_description, pattern = "¦", replacement = "", fixed = T)
blmdata$user_description <- gsub(blmdata$user_description, pattern = "Ã", replacement = "", fixed = T)
blmdata$user_description <- gsub(blmdata$user_description, pattern = "f", replacement = "", fixed = T)
blmdata$user_description <- gsub(blmdata$user_description, pattern = "ð", replacement = "", fixed = T)
blmdata$user_description <- gsub(blmdata$user_description, pattern = "Y", replacement = "", fixed = T)
blmdata$user_description <- gsub(blmdata$user_description, pattern = "~", replacement = "", fixed = T)
blmdata$user_description <- gsub(blmdata$user_description, pattern = "¯", replacement = "", fixed = T)
blmdata$user_description <- gsub(blmdata$user_description, pattern = "ª", replacement = "", fixed = T)
blmdata$user_description <- gsub(blmdata$user_description, pattern = "¸", replacement = "", fixed = T)
blmdata$user_description <- gsub(blmdata$user_description, pattern = "&gt;", replacement = "", fixed = T)
blmdata$user_description <- gsub(blmdata$user_description, pattern = "â", replacement = "", fixed = T)
blmdata$user_description <- gsub(blmdata$user_description, pattern = "¤", replacement = "", fixed = T)
blmdata$user_description <- gsub(blmdata$user_description, pattern = "ï", replacement = "", fixed = T)
blmdata$user_description <- gsub(blmdata$user_description, pattern = "T", replacement = "", fixed = T)
blmdata$user_description <- gsub(blmdata$user_description, pattern = "", replacement = "", fixed = T)
blmdata$user_description <- gsub(blmdata$user_description, pattern = "«", replacement = "", fixed = T)
blmdata$user_description <- gsub(blmdata$user_description, pattern = "¨", replacement = "", fixed = T)
blmdata$user_description <- gsub(blmdata$user_description, pattern = "&amp;", replacement = "&", fixed = T)
blmdata$user_description <- gsub(blmdata$user_description, pattern = "¢", replacement = "", fixed = T)
blmdata$user_description <- gsub(blmdata$user_description, pattern = "'ª", replacement = "", fixed = T)
blmdata$user_description <- gsub(blmdata$user_description, pattern = "o", replacement = "", fixed = T)
blmdata$user_description <- gsub(blmdata$user_description, pattern = "®", replacement = "", fixed = T)
blmdata$user_description <- gsub(blmdata$user_description, pattern = "â", replacement = "", fixed = T)
blmdata$user_description <- gsub(blmdata$user_description, pattern = "Y", replacement = "&", fixed = T)
blmdata$user_description <- gsub(blmdata$user_description, pattern = "~", replacement = "", fixed = T)
blmdata$user_description <- gsub(blmdata$user_description, pattern = "o", replacement = "", fixed = T)
blmdata$user_description <- gsub(blmdata$user_description, pattern = "½", replacement = "", fixed = T)
blmdata$user_description <- gsub(blmdata$user_description, pattern = "T", replacement = "", fixed = T)
blmdata$user_description <- gsub(blmdata$user_description, pattern = "^", replacement = "", fixed = T)
#replace data that is retreived the wrong way
replace_contraction(blmdata$rendered_content)
replace_emoticon(blmdata$redered_content)
replace_incomplete(blmdata, ".")
# Transform the tweet_id and user_id into fully written numbers
blmdata$tweet_id_full <- format(blmdata$tweet_id, scientific = FALSE)
blmdata$user_id_full <- format(blmdata$tweet_id, scientific = FALSE)
# clean source attribute to useful
html_tags <- c(
"<bold>Random</bold> text with symbols: &nbsp; &lt; &gt; &amp; &quot; &apos;",
"<p>More text</p> &cent; &pound; &yen; &euro; &copy; &reg;"
)
blmdata$source_tweet<- replace_html(blmdata$source_tweet)
prepared_data[[i]] <- blmdata
write.table(blmdata, paste0('../../gen/data-preparation/temp/', extracted_filename))
}
rm(blmdata)
prepared_data[[1]]
prepared_data[[2]]
library(plyr)
library(dplyr)
blm2020<-read.csv('../../gen/data-preparation/temp/BLM2020_dataset.csv', sep = '', na.strings=c("", "NA"), row.names=NULL)
blm2021<-read.csv('../../gen/data-preparation/temp/BLM2021_dataset.csv', sep = '', na.strings=c("", "NA"), row.names=NULL)
View(blm2020)
blm2021$retweet <- as.integer(blm2021$retweet)
# merge data
blm_merged<- rbind(blm2020, blm2021)
blm2021$reply <- as.integer(blm2021$reply)
# merge data
blm_merged<- rbind(blm2020, blm2021)
blm_merged$date <- as.Date(blm_merged$date)
blm_merged$user_created_date <- as.Date(blm_merged$user_created_date)
blm_merged$user_amount_followers <- as.integer(blm_merged$user_amount_followers, na.strings = "NA")
blm_merged$user_amount_friends <- as.integer(blm_merged$user_amount_friends, na.strings = "NA")
blm_merged$user_amount_status <- as.integer(blm_merged$user_amount_status, na.strings = "NA")
blm_merged$user_listed_count <- as.integer(blm_merged$user_listed_count, na.strings = "NA")
blm_merged$user_media_count <- as.integer(blm_merged$user_media_count, na.strings = "NA")
blm_merged$quote_count <- as.integer(blm_merged$quote_count, na.strings = "NA")
blm_merged$retweeted_tweet <- as.integer(blm_merged$retweeted_tweet, na.strings = "NA")
# add column with year of tweets
blm_merged$year <- format(blm_merged$date, format = "%Y")
write.csv(blm_merged, '../../gen/data-preparation/merging.csv')
blm_merged<-read.csv('../../gen/data-preparation/merging.csv', sep = ',', na.strings=c("", "NA"))
#blm2021<-read.csv('../../gen/data-preparation/temp/BLM2021_dataset.csv', sep = '', na.strings=c("", "NA"))
# set user_created_date as date
blm_merged$user_created_date <- as.Date(blm_merged$user_created_date, format = c("%Y-%m-%d"))
# Set date into as.Date
blm_merged$date <- as.Date(blm_merged$date)
#Retweet
RLR <- function(year, retweet, like, reply) {
for (i in year) {
retweet <-
(sum(as.integer(blm_merged[blm_merged$year == year, ]$retweet, na.rm = T)))
like <-
(sum(blm_merged[blm_merged$year == year, ]$like, na.rm = T))
reply <-
(sum(blm_merged[blm_merged$year == year, ]$reply, na.rm = T))
}
RLRdata <-
data.frame(
category = c("retweet", "Like", "Reply"),
count = c(retweet, like, reply)
)
return(RLRdata)
}
RLRdata2020 <- RLR(2020)
RLRdata2020
RLRdata2021 <- RLR(2021)
RLRdata2021
retweet <-
(sum(as.integer(blm_merged[blm_merged$year == year, ]$retweet, na.rm = TRUE)))
#Retweet
RLR <- function(year, retweet, like, reply) {
for (i in year) {
retweet <-
(sum(as.integer(blm_merged[blm_merged$year == year, ]$retweet, na.rm = TRUE)))
like <-
(sum(blm_merged[blm_merged$year == year, ]$like, na.rm = T))
reply <-
(sum(blm_merged[blm_merged$year == year, ]$reply, na.rm = T))
}
RLRdata <-
data.frame(
category = c("retweet", "Like", "Reply"),
count = c(retweet, like, reply)
)
return(RLRdata)
}
RLRdata2020 <- RLR(2020)
RLRdata2020
RLRdata2021 <- RLR(2021)
RLRdata2021
library(rtweet)
library(tidyr)
library(ggplot.multistats)
library(ggplot2)
library(forestmangr)
library(syuzhet)
library(tidyverse)
library(readxl) # read excel
library(tibble) # tobble dataframe
library(dplyr) # piping
library(stringr) # character manipulation
library(tidytext)
library(tokenizers)
library(stopwords)
library(lobstr)
library(glue)
blm_merged<-read.csv('../../gen/data-preparation/merging.csv', sep = ',', na.strings=c("", "NA"))
#blm2021<-read.csv('../../gen/data-preparation/temp/BLM2021_dataset.csv', sep = '', na.strings=c("", "NA"))
# remove first column
blm_merged <- subset(blm_merged, select = -row.names)
# set user_created_date as date
blm_merged$user_created_date <- as.Date(blm_merged$user_created_date, format = c("%Y-%m-%d"))
# Set date into as.Date
blm_merged$date <- as.Date(blm_merged$date)
# set variables with counting numbers into integers
blm_merged$reply <- as.integer(blm_merged$reply)
#Retweet
RLR <- function(year, retweet, like, reply) {
for (i in year) {
retweet <-
(sum(as.integer(blm_merged[blm_merged$year == year, ]$retweet, na.rm = TRUE)))
like <-
(sum(blm_merged[blm_merged$year == year, ]$like, na.rm = T))
reply <-
(sum(blm_merged[blm_merged$year == year, ]$reply, na.rm = T))
}
RLRdata <-
data.frame(
category = c("retweet", "Like", "Reply"),
count = c(retweet, like, reply)
)
return(RLRdata)
}
RLRdata2020 <- RLR(2020)
RLRdata2020
RLRdata2021 <- RLR(2021)
RLRdata2021
blm_merged<-read.csv('../../gen/data-preparation/merging.csv', sep = ',', na.strings=c("", "NA"))
#Retweet
RLR <- function(year){
for (i in year){
retweet <- (sum(blm_merged[blm_merged$year == year,]$retweet, na.rm = T))
like <- (sum(blm_merged[blm_merged$year == year,]$like, na.rm = T))
reply <- (sum(blm_merged[blm_merged$year == year,]$reply, na.rm = T))
}
RLRdata <- data.frame(category=c("Retweet", "Like", "Reply"), count = c(retweet, like, reply))
return(RLRdata)
}
RLRdata2020 <- RLR(2020)
RLRdata2020
RLRdata2021 <- RLR(2021)
RLRdata2021
#Adding columns
RLRdata2020$fraction = RLRdata2020$count / sum(RLRdata2020$count)
RLRdata2020$percentage = RLRdata2020$count / sum(RLRdata2020$count) * 100
RLRdata2020$ymax = cumsum(RLRdata2020$fraction)
RLRdata2020$ymin = c(0, head(RLRdata2020$ymax, n=-1))
#Rounding up
RLRdata2020 <- round_df(RLRdata2020, 2)
# Specify what the legend should say
Type_of_Tweet <- paste(RLRdata2020$category, RLRdata2020$percentage, "%")
ggplot(RLRdata2020, aes(ymax=ymax, ymin=ymin, xmax=4, xmin=3, fill=Type_of_Tweet)) +
geom_rect() +
coord_polar(theta="y") +
xlim(c(2, 4)) +
theme_void() +
theme(legend.position = "right")
#Adding columns
RLRdata2021$fraction = RLRdata2021$count / sum(RLRdata2021$count)
RLRdata2021$percentage = RLRdata2021$count / sum(RLRdata2021$count) * 100
RLRdata2021$ymax = cumsum(RLRdata2021$fraction)
RLRdata2021$ymin = c(0, head(RLRdata2021$ymax, n=-1))
#Rounding up
RLRdata2021 <- round_df(RLRdata2021, 2)
# Specify what the legend should say
Type_of_Tweet <- paste(RLRdata2021$category, RLRdata2021$percentage, "%")
ggplot(RLRdata2021, aes(ymax=ymax, ymin=ymin, xmax=4, xmin=3, fill=Type_of_Tweet)) +
geom_rect() +
coord_polar(theta="y") +
xlim(c(2, 4)) +
theme_void() +
theme(legend.position = "right")
tweets <- function(year){
tweets <- blm_merged[blm_merged$year == year,] %>%
select(text) %>%
unnest_tokens(word, text)
tweets <- tweets %>%
anti_join(get_stopwords(language = "nl", source = "snowball"))
}
tweets(2020)
tweets(2021)
#making a histogram
histogram_tweets <- function(year){
tweets(year) %>% # gives you a bar chart of the most frequent words found in the tweets
count(word, sort = TRUE) %>%
top_n(15) %>%
mutate(word = reorder(word, n)) %>%
ggplot(aes(x = word, y = n)) +
geom_col() +
xlab(NULL) +
coord_flip() +
labs(y = "Count",
x = "Unique words",
title = "Most frequent words found in the tweets of #BLM",
subtitle = "Stop words removed from the list")
}
histogram_tweets(2020)
sentiment <- function(year){
tweets_sentiment <- iconv(tweets(year), from="UTF-8", to="ASCII", sub="")# Converting tweets to ASCII to trackle strange characters
# removing retweets, in case needed
tweets_sentiment <-gsub("(RT|via)((?:\\b\\w*@\\w+)+)","",tweets_sentiment)
# removing mentions, in case needed
tweets_sentiment <-gsub("@\\w+","",tweets_sentiment)
ew_sentiment<-get_nrc_sentiment((tweets_sentiment))
sentimentscores<-data.frame(colSums(ew_sentiment[,]))
names(sentimentscores) <- "Score"
sentimentscores <- cbind("sentiment"=rownames(sentimentscores),sentimentscores)
rownames(sentimentscores) <- NULL
# make plot
ggplot(data=sentimentscores,aes(x=sentiment,y=Score))+
geom_bar(aes(fill=sentiment),stat = "identity")+
theme(legend.position="none")+
xlab("Sentiments")+ylab("Scores")+
ggtitle("Total sentiment based on scores 2020")+
theme_minimal()
}
sentiment(2020)
sentiment(2021)
retweet_location <- function(year){
ggplot(data = blm_merged[blm_merged$year == year,]) +
geom_point(mapping = aes(x = retweet, y = location))
}
retweet_location(2020)
retweet_location(2021)
retweet_date <- function(year){
ggplot(data = blm_merged[blm_merged$year == year,]) +
geom_point(mapping = aes(x = retweet, y = date), color = "blue")
}
retweet_date(2020)
retweet_date(2021)
followers_friends <- function(year){
ggplot(data = blm_merged[blm_merged$year == year,]) +
geom_point(mapping = aes(x = user_amount_followers, y = user_amount_friends), color = "blue")
}
followers_friends(2020)
followers_friends(2021)
status_location <- function(year){
ggplot(data = blm_merged[blm_merged$year == year,]) +
geom_point(mapping = aes(x = user_amount_status, y = location), color = "blue")
}
status_location(2020)
status_location(2021)
state.name[grep ("VVD", "PvdA", "PVV", "CDA", "SP", "CU", "PvdD", state.name)]
#Retweet
RLR <- function(year){
for (i in year){
retweet <- (sum(blm_merged[blm_merged$year == year,]$retweet, na.rm = T))
like <- (sum(blm_merged[blm_merged$year == year,]$like, na.rm = T))
reply <- (sum(blm_merged[blm_merged$year == year,]$reply, na.rm = T))
}
RLRdata <- data.frame(category=c("Retweet", "Like", "Reply"), count = c(retweet, like, reply))
return(RLRdata)
}
RLRdata2020 <- RLR(2020)
RLRdata2020
RLRdata2021 <- RLR(2021)
#Retweet
RLR <- function(year){
for (i in year){
retweet <- (sum(blm_merged[blm_merged$year == year,]$retweet, na.rm = T))
like <- (sum(blm_merged[blm_merged$year == year,]$like, na.rm = T))
reply <- (sum(blm_merged[blm_merged$year == year,]$reply, na.rm = T))
}
RLRdata <- data.frame(category=c("Retweet", "Like", "Reply"), count = c(retweet, like, reply))
return(RLRdata)
}
RLRdata2020 <- RLR(2020)
RLRdata2020
RLRdata2021 <- RLR(2021)
#Adding columns
RLRdata2020$fraction = RLRdata2020$count / sum(RLRdata2020$count)
RLRdata2020$percentage = RLRdata2020$count / sum(RLRdata2020$count) * 100
RLRdata2020$ymax = cumsum(RLRdata2020$fraction)
RLRdata2020$ymin = c(0, head(RLRdata2020$ymax, n=-1))
#Rounding up
RLRdata2020 <- round_df(RLRdata2020, 2)
# Specify what the legend should say
Type_of_Tweet <- paste(RLRdata2020$category, RLRdata2020$percentage, "%")
ggplot(RLRdata2020, aes(ymax=ymax, ymin=ymin, xmax=4, xmin=3, fill=Type_of_Tweet)) +
geom_rect() +
coord_polar(theta="y") +
xlim(c(2, 4)) +
theme_void() +
theme(legend.position = "right")
#Adding columns
RLRdata2021$fraction = RLRdata2021$count / sum(RLRdata2021$count)
RLRdata2021$percentage = RLRdata2021$count / sum(RLRdata2021$count) * 100
RLRdata2021$ymax = cumsum(RLRdata2021$fraction)
RLRdata2021$ymin = c(0, head(RLRdata2021$ymax, n=-1))
#Rounding up
RLRdata2021 <- round_df(RLRdata2021, 2)
# Specify what the legend should say
Type_of_Tweet <- paste(RLRdata2021$category, RLRdata2021$percentage, "%")
ggplot(RLRdata2021, aes(ymax=ymax, ymin=ymin, xmax=4, xmin=3, fill=Type_of_Tweet)) +
geom_rect() +
coord_polar(theta="y") +
xlim(c(2, 4)) +
theme_void() +
theme(legend.position = "right")
tweets <- function(year){
tweets <- blm_merged[blm_merged$year == year,] %>%
select(text) %>%
unnest_tokens(word, text)
tweets <- tweets %>%
anti_join(get_stopwords(language = "nl", source = "snowball"))
}
tweets(2020)
tweets(2021)
#making a histogram
histogram_tweets <- function(year){
tweets(year) %>% # gives you a bar chart of the most frequent words found in the tweets
count(word, sort = TRUE) %>%
top_n(15) %>%
mutate(word = reorder(word, n)) %>%
ggplot(aes(x = word, y = n)) +
geom_col() +
xlab(NULL) +
coord_flip() +
labs(y = "Count",
x = "Unique words",
title = "Most frequent words found in the tweets of #BLM",
subtitle = "Stop words removed from the list")
}
histogram_tweets(2020)
#making a histogram
histogram_tweets <- function(year){
tweets(year) %>% # gives you a bar chart of the most frequent words found in the tweets
count(word, sort = TRUE) %>%
top_n(15) %>%
mutate(word = reorder(word, n)) %>%
ggplot(aes(x = word, y = n)) +
geom_col() +
xlab(NULL) +
coord_flip() +
labs(y = "Count",
x = "Unique words",
title = "Most frequent words found in the tweets of #BLM",
subtitle = "Stop words removed from the list")
}
histogram_tweets(2020)
#making a histogram
histogram_tweets <- function(year) {
tweets(year) %>% # gives you a bar chart of the most frequent words found in the tweets
count(word, sort = TRUE) %>%
top_n(15) %>%
mutate(word = reorder(word, n)) %>%
ggplot(aes(x = word, y = n)) +
geom_col() +
xlab(NULL) +
coord_flip() +
labs(
y = "Count",
x = "Unique words",
title = "Most frequent words found in the tweets of #BLM",
subtitle = "Stop words removed from the list"
)
}
histogram_tweets(2020)
sentiment <- function(year){
tweets_sentiment <- iconv(tweets(year), from="UTF-8", to="ASCII", sub="")# Converting tweets to ASCII to        trackle strange characters
# removing retweets, in case needed
tweets_sentiment <-gsub("(RT|via)((?:\\b\\w*@\\w+)+)","",tweets_sentiment)
# removing mentions, in case needed
tweets_sentiment <-gsub("@\\w+","",tweets_sentiment)
ew_sentiment<-get_nrc_sentiment((tweets_sentiment))
sentimentscores<-data.frame(colSums(ew_sentiment[,]))
names(sentimentscores) <- "Score"
sentimentscores <- cbind("sentiment"=rownames(sentimentscores),sentimentscores)
rownames(sentimentscores) <- NULL
# make plot
ggplot(data=sentimentscores,aes(x=sentiment,y=Score))+
geom_bar(aes(fill=sentiment),stat = "identity")+
theme(legend.position="none")+
xlab("Sentiments")+ylab("Scores")+
ggtitle("Total sentiment based on scores 2020")+
theme_minimal()
}
sentiment(2020)
sentiment(2021)
# make plot
ggplot(data=sentimentscores,aes(x=sentiment,y=Score))+
geom_bar(aes(fill=sentiment),stat = "identity")+
theme(legend.position="none")+
xlab("Sentiments")+ylab("Scores")+
ggtitle("Total sentiment based on scores" + year)+
theme_minimal()
sentiment <- function(year){
tweets_sentiment <- iconv(tweets(year), from="UTF-8", to="ASCII", sub="")# Converting tweets to ASCII to        trackle strange characters
# removing retweets, in case needed
tweets_sentiment <-gsub("(RT|via)((?:\\b\\w*@\\w+)+)","",tweets_sentiment)
# removing mentions, in case needed
tweets_sentiment <-gsub("@\\w+","",tweets_sentiment)
ew_sentiment<-get_nrc_sentiment((tweets_sentiment))
sentimentscores<-data.frame(colSums(ew_sentiment[,]))
names(sentimentscores) <- "Score"
sentimentscores <- cbind("sentiment"=rownames(sentimentscores),sentimentscores)
rownames(sentimentscores) <- NULL
# make plot
ggplot(data=sentimentscores,aes(x=sentiment,y=Score))+
geom_bar(aes(fill=sentiment),stat = "identity")+
theme(legend.position="none")+
xlab("Sentiments")+ylab("Scores")+
ggtitle("Total sentiment based on scores" + year)+
theme_minimal()
}
sentiment(2020)
sentiment <- function(year){
tweets_sentiment <- iconv(tweets(year), from="UTF-8", to="ASCII", sub="")# Converting tweets to ASCII to        trackle strange characters
# removing retweets, in case needed
tweets_sentiment <-gsub("(RT|via)((?:\\b\\w*@\\w+)+)","",tweets_sentiment)
# removing mentions, in case needed
tweets_sentiment <-gsub("@\\w+","",tweets_sentiment)
ew_sentiment<-get_nrc_sentiment((tweets_sentiment))
sentimentscores<-data.frame(colSums(ew_sentiment[,]))
names(sentimentscores) <- "Score"
sentimentscores <- cbind("sentiment"=rownames(sentimentscores),sentimentscores)
rownames(sentimentscores) <- NULL
# make plot
ggplot(data=sentimentscores,aes(x=sentiment,y=Score))+
geom_bar(aes(fill=sentiment),stat = "identity")+
theme(legend.position="none")+
xlab("Sentiments")+ylab("Scores")+
ggtitle("Total sentiment based on scores" )+
theme_minimal()
}
sentiment(2020)
sentiment(2021)
sentiment(2020)
sentiment(2021)
retweet_location <- function(year){
ggplot(data = blm_merged[blm_merged$year == year,]) +
geom_point(mapping = aes(x = retweet, y = location))
}
retweet_location(2020)
retweet_location(2021)
retweet_date <- function(year){
ggplot(data = blm_merged[blm_merged$year == year,]) +
geom_point(mapping = aes(x = retweet, y = date), color = "blue")
}
retweet_date(2020)
retweet_date(2021)
followers_friends <- function(year){
ggplot(data = blm_merged[blm_merged$year == year,]) +
geom_point(mapping = aes(x = user_amount_followers, y = user_amount_friends), color = "blue")
}
followers_friends(2020)
followers_friends(2021)
status_location <- function(year){
ggplot(data = blm_merged[blm_merged$year == year,]) +
geom_point(mapping = aes(x = user_amount_status, y = location), color = "blue")
}
status_location(2020)
status_location(2021)
state.name[grep ("VVD", "PvdA", "PVV", "CDA", "SP", "CU", "PvdD", state.name)]
